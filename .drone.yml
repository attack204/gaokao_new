kind: pipeline
type: docker
name: test_build

environment:
  PROFILES_ACTIVE: test
  ENVS: test
  TAG: "${DRONE_COMMIT_SHA:0:8}"


# drone构建步骤
steps:
  # 0.前端打包
  - name: node_compile_manage
    pull: if-not-exists
    image: node:my12
    volumes:
      # node构建缓存1
      - name: node_cache_manage
        path: /drone/src/frontend/manage/node_modules
      # 挂载宿主机的目录manage
      - name: front_end_manage
        path: /drone/src/frontend/manage/dist
    commands:
      # 开始打包maven工程
      - pwd
      - cd ./frontend/manage
      # 将打包后的文件复制到宿主机映射目录
      - npm install
      - npm run build

  # 0.前端打包
  - name: node_compile_custom
    pull: if-not-exists
    image: node:my12
    volumes:
      # node构建缓存2
      - name: node_cache_custom
        path: /drone/src/frontend/custom/node_modules
      # 挂载宿主机的目录custom
      - name: front_end_custom
        path: /drone/src/frontend/custom/dist
    commands:
      # 开始打包maven工程
      - pwd
      - cd ./frontend/custom
      # 将打包后的文件复制到宿主机映射目录
      - npm install
      - npm run build

  #1.maven打包
  - name: maven_compile
    pull: if-not-exists
    image: maven:3.8-adoptopenjdk-8
    volumes:
      # maven构建缓存
      - name: cache
        path: /root/.m2
      # 挂载宿主机的目录
      - name: data
        path: /home/art
      # 前端资源
      - name: front_end_manage
        path: /drone/src/admin-api/src/main/resources/static
      - name: front_end_custom
        path: /drone/src/web-api/src/main/resources/static
    commands:
      # 开始打包maven工程
      - ls -l /drone/src/admin-api/src/main/resources/static
      - ls -l /drone/src/admin-api/src/main/resources/static/static/img
      - ls -l /drone/src/web-api/src/main/resources/static
      - ls -l /drone/src/web-api/src/main/resources/static/static/img
      - mvn clean package -Dmaven.test.skip=true
      - cp /drone/src/admin-api/target/*.jar /drone/src/
      - cp /drone/src/admin-api/target/*.jar /home/art/
      - cp /drone/src/deploy/admin/admin-$PROFILES_ACTIVE.sh  /drone/src/admin.sh
      - cp /drone/src/web-api/target/*.jar /drone/src/
      - cp /drone/src/web-api/target/*.jar /home/art/
      - cp /drone/src/deploy/web/web-$PROFILES_ACTIVE.sh  /drone/src/web.sh
      - chmod 777 /drone/src/admin.sh & chmod 777 /drone/src/web.sh
      - ls -l /drone/src/
      - mv /etc/localtime /etc/localtime.bak
      - ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
      - date
      - echo $PROFILES_ACTIVE"_"$TAG"_"`date +"%Y%m%d"`
      - echo $PROFILES_ACTIVE"_"$TAG"_"`date +"%Y%m%d"`  > .tags
    depends_on:
      - node_compile_manage
      - node_compile_custom
      # 2.docker build admin
  - name: docker_build_admin
    pull: if-not-exists
    image: plugins/docker
    volumes:
      - name: docker
        path: /var/run/docker.sock
    settings:
      username:
        from_secret: dockername
      password:
        from_secret: dockerpass
      repo: ccr.ccs.tencentyun.com/gaokao_system/manage
      registry: ccr.ccs.tencentyun.com
      dockerfile: /drone/src/admin-api/Dockerfile
    depends_on:
      - maven_compile
  # 2.docker build mobile
  - name: docker build mobile
    pull: if-not-exists
    image: plugins/docker
    volumes:
      - name: docker
        path: /var/run/docker.sock
    settings:
      username:
        from_secret: dockername
      password:
        from_secret: dockerpass
      repo: ccr.ccs.tencentyun.com/gaokao_system/custom
      registry:  ccr.ccs.tencentyun.com
      dockerfile: /drone/src/web-api/Dockerfile
    depends_on:
      - docker_build_admin
      # 挂载的主机卷，可以映射到docker容器中
volumes:
  - name: node_cache_manage
    host:
      path: /root/node/mnode/node_modules
  - name: node_cache_custom
    host:
      path: /root/node/cnode/node_modules
  - name: front_end_manage
    host:
      path: /root/node/manage
  - name: front_end_custom
    host:
      path: /root/node/custom
  # maven构建缓存
  - name: cache
    host:
      path: /root/maven/m2
  # maven构建后与宿主机通信的共享目录
  - name: data
    host:
      path: /root/maven/art
  - name: docker
    host:
      path: /var/run/docker.sock

# drone执行触发器
trigger:
  branch:
    - feature_ci*
    - feature-ci*
    - dev
node:
  BUILD: A

---
kind: pipeline
type: ssh
name: test_deploy

server:
  host:
    from_secret: test_host
  user:
    from_secret: name
  password:
    from_secret: pass
clone:
  disable: true

# drone构建步骤
steps:
  - name: ssh commands
    environment:
      PROFILES_ACTIVE: test
      TAG: "${DRONE_COMMIT_SHA:0:8}"
      dockername:
        from_secret: dockername
      dockerpass:
        from_secret: dockerpass
    commands:
      - export days=`date +"%Y%m%d"`
      - /home/tools/docker_start.sh  $dockername $dockerpass $PROFILES_ACTIVE"_"$TAG"_"$days

depends_on:
  - test_build
# drone执行触发器
trigger:
  branch:
    - feature_ci*
    - feature-ci*
    - dev

node:
  DEPLOY: TEST